package DataDictionary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Aggregation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Boolean_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Constraint_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Date_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Double_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ExclusiveSpecialization_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Field_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FieldDefiniton_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Integer_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new NonExclusiveSpecialization_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new SemanticDomain_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new SemanticDomainDefinition_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Set_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new StructureDefinition_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Text_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new FieldDefiniton_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new SemanticDomain_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfc8L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfd7L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfd4L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfd8L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfd9L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bff3L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfe2L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfdcL), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfdaL), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bff0L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bff6L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfcfL), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0c001L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bff9L), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfdbL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bfdcL), MetaIdFactory.conceptId(0xb7df9610c91c472eL, 0xb4856407763b5456L, 0x13db5904c2c0bff6L)).seal();
}
